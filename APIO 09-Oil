// http://apio-olympiad.org/2009/apio2009-solutions.pdf

#include <bits/stdc++.h>
using namespace std;

#define max3(a, b, c) max(a, max(b, c))

const int inf = 2e9;
const int N = 2e3 + 15;
int n, m, k, p[N][N], dp[4][N][N], ans;
int krow[N], kcol[N], maxrow[N], maxcol[N];

// 0 left_up down_right
// 1 right_up down_left
// 2 left_down up_right
// 3 right_down up_left

inline void checkx(int &x) {
    x = max(1, x);
    x = min(n, x);
}

inline void checky(int &y) {
    y = max(1, y);
    y = min(m, y);
}

inline int get(int x1, int y1, int x2, int y2) {
    checkx(x1), checkx(x2);
    checky(y1), checky(y2);

    return p[x2][y2] - p[x1 - 1][y2] - p[x2][y1 - 1] + p[x1 - 1][y1 - 1];
}

int main() {
    scanf("%d%d%d", &n, &m, &k);
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j) {
            int x;
            scanf("%d", &x);
            p[i][j] = p[i-1][j] + p[i][j-1] - p[i-1][j-1] + x;
        }

    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j)
            krow[i] = max(krow[i], get(i - k + 1, j - k + 1, i, j));

    for(int j = 1; j <= m; ++j)
        for(int i = 1; i <= n; ++i)
            kcol[j] = max(kcol[j], get(i - k + 1, j - k + 1, i, j));

    for(int j = m; j; --j)
        maxcol[j] = max(maxcol[j+1], kcol[j]);

    for(int i = n; i; --i)
        maxrow[i] = max(maxrow[i+1], krow[i]);

    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j)
            dp[0][i][j] = max3(dp[0][i-1][j], dp[0][i][j-1], get(i - k + 1, j - k + 1, i, j));

    for(int i = 1; i <= n; ++i)
        for(int j = m; j; --j)
            dp[1][i][j] = max3(dp[1][i-1][j], dp[1][i][j+1], get(i - k + 1, j, i, j + k - 1));

    for(int i = n; i; --i)
        for(int j = 1; j <= m; ++j)
            dp[2][i][j] = max3(dp[2][i+1][j], dp[2][i][j-1], get(i, j - k + 1, i + k - 1, j));

    for(int i = n; i; --i)
        for(int j = m; j; --j)
            dp[3][i][j] = max3(dp[3][i+1][j], dp[3][i][j+1], get(i, j, i + k - 1, j + k - 1));

    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j) {
            ans = max(ans, dp[0][i][j] + dp[1][i][j+1] + dp[2][i+1][m]);
            ans = max(ans, dp[0][i][j] + dp[1][n][j+1] + dp[2][i+1][j]);
            ans = max(ans, dp[0][n][j] + dp[1][i][j+1] + dp[3][i+1][j]);
            ans = max(ans, dp[0][i][m] + dp[2][i+1][j] + dp[3][i+1][j+1]);
        }

    for(int i = 1; i <= n; ++i)
        for(int j = i + k; j <= n - k; ++j)
            ans = max(ans, krow[i] + krow[j] + maxrow[j + k]);

    for(int i = 1; i <= m; ++i)
        for(int j = i + k; j <= m - k; ++j)
            ans = max(ans, kcol[i] + kcol[j] + maxcol[j + k]);

    printf("%d\n", ans);
    return 0;
}
