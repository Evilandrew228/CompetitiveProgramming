// https://codeforces.com/blog/entry/49160

#include <iostream>
#include <string>
#include <queue>
#include <cstring>
#include <vector>
#include <map>
#include <algorithm>
#include <math.h>
#include <utility>
#include <set>
#include <time.h>
#include <list>
#include <typeinfo>
#include <cstdio>
#include <numeric>
#include <stack>
#include <stdio.h>
using namespace std;
 
#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define endl '\n'
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

const int inf = 2e9;
const int N = 2e5 + 15;
int n, t, k, d[N], cnt[N], p[N], leaves_now;
set <int> g[N];
queue <int> q;
set <int> now, dist[N], leaves[N];

int main() {
	scanf("%d%d%d", &n, &t, &k);
	for(int i = 1; i <= n; ++i)
		now.insert(i);
	for(int i = 1; i <= t; ++i)
		scanf("%d", &cnt[i]);
	
	q.push(1);
	now.erase(1);

	while(!q.empty()) {
		int v = q.front();
		q.pop();
		while(cnt[d[v] + 1] > 0) {
			if(now.empty()) {
				puts("-1");
				return 0;
			}
			int to = *now.begin();
			now.erase(now.begin());
			g[v].insert(to);
			d[to] = d[v] + 1;
			p[to] = v;
			cnt[d[to]]--;
			if(g[v].size() > 1)
				dist[d[to]].insert(to);
			q.push(to);
		}
	}
	for(int i = 2; i <= n; ++i)
		if(g[i].empty())
			leaves[d[i]].insert(i), ++leaves_now;

	for(int i = 1; i <= t; ++i) {
		while(leaves_now > k && !dist[i].empty() && !leaves[i-1].empty()) {
			int v = *dist[i].begin();
			dist[i].erase(v);
			g[p[v]].erase(v);
			int u = *leaves[i-1].begin();
			leaves[i-1].erase(u);
			g[u].insert(v);
			p[v] = u;
			--leaves_now;
		}
	}
	for(int i = 1; i <= t; ++i) {
		if(cnt[i]) {
			puts("-1");
			return 0;
		}
	}
	if(leaves_now != k) {
		puts("-1");
		return 0;
	}
	printf("%d\n", n);
	for(int i = 1; i <= n; ++i)
		for(int j : g[i])
			printf("%d %d\n", i, j);
	return 0;
}
