// https://codeforces.com/blog/entry/51588

#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <map>
#include <algorithm>
#include <math.h>
#include <utility>
#include <set>
#include <time.h>
#include <list>
#include <typeinfo>
#include <cstdio>
#include <numeric>
#include <stdio.h>
using namespace std;

#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define endl '\n'
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

const int inf = 2e9;
const int N = 1e5 + 15;
int n, l[N], r[N], t[2][N], a[N], last, root, ansans;
bool p[N], used[N];
map <int, int> soot;
set <int> ans;

inline void inc(int ind, int i, int val) {
	for(; i <= last; i = (i | (i + 1)))
		t[ind][i] += val;
}

inline int get(int ind, int i) {
	int res = 0;
	for(; i >= 0; i = (i & (i + 1)) - 1)
		res += t[ind][i];
	return res;
}

inline int get(int ind, int l, int r) {
	return get(ind, r) - get(ind, l - 1);
}

void dfs(int v) {
	if(!get(0, 0, a[v] - 1) && !get(1, a[v] + 1, last))
		used[a[v]] = true;
	if(l[v] != -1) {
		inc(0, a[v], 1);
		dfs(l[v]);
		inc(0, a[v], -1);
	}
	if(r[v] != -1) {
		inc(1, a[v], 1);
		dfs(r[v]);
		inc(1, a[v], -1);
	}
}

int main() {
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i) {
		scanf("%d%d%d", &a[i], &l[i], &r[i]);
		if(l[i] != -1)
			p[l[i]] = true;
		if(r[i] != -1)
			p[r[i]] = true;
		soot[a[i]] = 0;
	}
	for(int i = 1; i <= n; ++i)
		if(!p[i]) {
			root = i;
			break;
		}
	for(auto &it : soot)
		it.se = ++last;
	for(int i = 1; i <= n; ++i)
		a[i] = soot[a[i]];
	dfs(root);
	for(int i = 1; i <= n; ++i)
		ansans += !used[a[i]];
	printf("%d\n", ansans);
	return 0;
}
