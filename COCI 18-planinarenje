// the same task, but with higher number of edges (the only difference is that one should use faster matching algorithm) https://discuss.codechef.com/t/hamilg-editorial/11310

#include <bits/stdc++.h>
using namespace std;

#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

const int inf = 2e9;
const int N = 1e4 + 15;
int n, m, mt[N];
vector <int> g[N];
bool used[N];

bool kuhn(int v) {
    if(used[v])
        return false;
    used[v] = true;
    for(int to : g[v])
        if(!mt[to]) {
            mt[to] = v;
            mt[v] = to;
            return true;
        }
    for(int to : g[v])
        if(kuhn(mt[to])) {
            mt[to] = v, mt[v] = to;
            return true;
        }
    return false;
}

void dfs(int v) {
    used[v] = true;
    for(int to : g[v])
        if(!used[mt[to]])
            dfs(mt[to]);
}

int main() {
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= m; ++i) {
        int u, v;
        scanf("%d%d", &u, &v);
        g[u].pb(v + n);
        g[v + n].pb(u);
    }
    for(int run = 1; run; ) {
        run = 0, memset(used, 0, sizeof(used));
        for(int i = 1; i <= n; ++i)
            if(!mt[i] && kuhn(i))
                run = true;
    }
    memset(used, 0, sizeof(used));
    for(int i = 1; i <= n; ++i)
        if(!mt[i] && !used[i])
            dfs(i);
    for(int i = 1; i <= n; ++i) {
        if(used[i])
            puts("Mirko");
        else
            puts("Slavko");
    }
    return 0;
}
