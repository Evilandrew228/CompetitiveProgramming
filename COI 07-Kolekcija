#include <bits/stdc++.h>
using namespace std;

#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

const int inf = 2e9;
const int N = 3e5 + 15;
int n, m, k, a[N], ansans, dp[N], ind[N];
vector <pii> temp;
vector <int> indexes;
vector <int> cur;
pii ans[N];
set <pii> is;

int main() {
	fill(dp + 1, dp + N, inf);
	cin >> n >> k >> m;
	cur.pb(-inf);
	for(int i = 1; i <= m; ++i) {
		cin >> a[i];
		cur.pb(a[i]);
	}
	sort(cur.begin(), cur.end());
	int now = inf, index = 0;
	for(int i = 1, j = 1; i <= m; ++i) {
		while(j < i && cur[i] - cur[j] + 1 > k) {
			if(dp[j-1] - cur[j] + 1 < now) {
				index = j;
				now = dp[j-1] - cur[j] + 1;
			}
			++j;
		}
		if(cur[i] + now < k + dp[j-1]) {
			dp[i] = cur[i] + now;
			ind[i] = index - 1;
		}
		else {
			dp[i] = k + dp[j-1];
			ind[i] = j - 1;
		}
	}
	cout << dp[m] << endl;
    for(int i = m; i >= 1; i = ind[i]){
        for(int l = cur[ind[i] + 1]; l <= cur[i]; l += k) {
            if(l + k - 1 <= cur[i])
                is.insert(mp(l, l + k - 1));
            else
                is.insert(mp(cur[i] - k + 1, cur[i]));
        }
    }
    for(int i = 1; i <= m; ++i)
    	ans[i] = *(--is.upper_bound(mp(a[i], inf)));
	for(int i = 1; i <= m; ++i)
		cout << ans[i].f << ' ' << ans[i].se << endl;
    return 0;
}
