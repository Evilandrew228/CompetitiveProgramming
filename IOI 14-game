// http://blog.brucemerry.org.za/2014/07/

#include <iostream>
#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <math.h>
#include <random>
#include <bitset>
#include <string>
#include <cstring>
#include <set>
#include <vector>
#include <map>
#include <stack>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define endl '\n'
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

const int inf = 2e9;
const int N = 2e3 + 15;
int n, deg[N][N], sz[N], p[N];

void initialize(int N) {
	n = N;
	for(int i = 0; i < n; ++i)
		p[i] = i, sz[i] = 1;
}

int find(int v) {
	if(v == p[v])
		return v;
	return p[v] = find(p[v]);
}

void unio(int a, int b) {
	a = find(a);
	b = find(b);
	if(a != b) {
		if(sz[a] < sz[b])
			swap(a, b);
		sz[a] += sz[b];
		p[b] = a;
		for(int i = 0; i < n; ++i) {
			if(i == a || i == b)
				continue;
			deg[a][i] += deg[b][i],
			deg[i][a] += deg[b][i];
		}
	}
}

int hasEdge(int u, int v) {
	u = find(u);
	v = find(v);
	++deg[u][v], ++deg[v][u];
	if(deg[u][v] == sz[u] * sz[v]) {
		unio(u, v);
		return 1;
	}
    return 0;
}
