// https://github.com/zoooma13/Competitive-Programming/blob/master/biochips.cpp

#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <math.h>
#include <cstdio>
#include <stdio.h>
#include <queue>
#include <deque>
using namespace std;
 
#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define endl '\n'
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>
 
const int inf = 2e9;
const int N = 2e5 + 1;
const int M = 5e2 + 1;
int n, m, a[N], root, sz[N], dp[N][M];
vector <int> g[N];
 
void dfs(int v) {
	sz[v] = 1;
	for(int to : g[v]) {
		dfs(to);
		sz[v] += sz[to];
	}
	for(int to : g[v])
		for(int i = min(m, sz[v] + sz[to]); i >= 1; --i) {
			for(int j = 1; j <= min(m, sz[to]) && j < i; ++j)
				if(dp[v][i - j] && dp[to][j])
					dp[v][i] = max(dp[v][i], dp[v][i - j] + dp[to][j]);
				dp[v][i] = max(dp[v][i], dp[to][i]);
			}
	dp[v][1] = max(a[v], dp[v][1]);
}
 
int main() {
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; ++i) {
		int x;
		scanf("%d%d", &x, &a[i]);
		if(!x)
			root = i;
		else
			g[x].pb(i);
	}
	dfs(root);
	printf("%d\n", dp[root][m]);
	return 0;
}
