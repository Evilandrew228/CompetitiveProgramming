/*
    Let's define dp[l][r][move], meaning interval [l;r] and who is taking a peace now. Value in it represents minimum sum that IOI-chan may take.
    Transitions are quite simple: we definitely know where shall we go if there is IOI-chan taking,
                                  otherwise we shall take an optimal variant of [l+1;r] and [l;r-1], but presenting them as a circle intervals. (check the code below to understand more thoroughly)
    Thus, the answer is sum over all array minus minimum value over all started cake.
*/
#include <bits/stdc++.h>
using namespace std;
 
#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

const ll inf = 2e15;
const int N = 2e3 + 15;
ll n, a[N], dp[N][N][2], ans = inf, summ;

ll rec(int l, int r, bool first) {
    if(dp[l][r][first] != inf)
        return dp[l][r][first];

    dp[l][r][first] = 0;

    int nextr = (r - 1 + n) % n;
    int nextl = (l + 1) % n;

    if(!first)
        dp[l][r][first] = min(rec(l, nextr, !first), rec(nextl, r, !first));
    else {
        if(a[r] > a[l])
            dp[l][r][first] = rec(l, nextr, !first) + a[r];
        else
            dp[l][r][first] = rec(nextl, r, !first) + a[l];
    }
    return dp[l][r][first];
}


int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cin >> n;
    for(int i = 0; i < n; ++i) {
        cin >> a[i];
        summ += a[i];
    }

    for(int i = 0; i < N; ++i)
        for(int j = 0; j < N; ++j)
            for(int k = 0; k < 2; ++k)
                dp[i][j][k] = inf;

    for(int i = 0; i < n; ++i)
        for(int d = 0; d < 2; ++d)
            dp[i][i][d] = d * a[i];

    for(int i = 0; i < n; ++i)
        ans = min(ans, rec((i + 1) % n, (i - 1 + n) % n, 1));

    cout << summ - ans << endl;
    return 0;
}
