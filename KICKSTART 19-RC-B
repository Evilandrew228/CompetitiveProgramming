/*
	Firstly, let's find maximum point in each row for each point until difference is not greater than k.
	In other words, for each (i, j) mark the rightest (i, l) such that (max(j <= h <= l) {a[i][h]}) - (min(j <= g <= l) {a[i][g]} <= k
	Let's call such point as pos[i][j]
	Then, having fixed some point and started from it, we are going down maintaining minimum among all passed pos[i][j].
	On each step calculate area of such rectangle
	Take maximum among all calculated areas.
	Check the code below to understand more thoroughly.
*/

#include <stdio.h>
#include <algorithm>
#include <math.h>
using namespace std;
 
#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define endl '\n'
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

const int inf = 2e9;
const int N = 3e2 + 15;
int n, q, m, k, a[N][N], ans, t[2][N][N << 1], pos[N][N];

inline void update(int j, int i, int val) {
	i += m;
	for(t[0][j][i] = t[1][j][i] = val; i > 1; i >>= 1) {
		t[0][j][i >> 1] = min(t[0][j][i], t[0][j][i ^ 1]);
		t[1][j][i >> 1] = max(t[1][j][i], t[1][j][i ^ 1]);
	}
}

inline int get(int j, int l, int r, bool is_minimum) {
	int res = (is_minimum ? inf : -inf);
	for(l += m, r += m + 1; l < r; l >>= 1, r >>= 1) {
		if(l & 1) {
			if(is_minimum)
				res = min(res, t[0][j][l++]);
			else
				res = max(res, t[1][j][l++]);
		}
		if(r & 1) {
			if(is_minimum)
				res = min(res, t[0][j][--r]);
			else
				res = max(res, t[1][j][--r]);
		}
	}
	return res;
}

int main() {
	scanf("%d", &q);
	for(int test_case = 1; test_case <= q; ++test_case) {
		ans = 0;
		scanf("%d%d%d", &n, &m, &k);
		for(int i = 1; i <= n; ++i) {
			fill(t[0][i], t[0][i] + (N << 1), inf);
			fill(t[1][i], t[1][i] + (N << 1), -inf);
			for(int j = 1; j <= m; ++j) {
				scanf("%d", &a[i][j]);
				update(i, j, a[i][j]);
			}
		}
		for(int i = 1; i <= n; ++i)
			for(int j = 1; j <= m; ++j) {
				int l = j, r = m;
				while(l <= r) {
					int mid = l + r >> 1;
					if(get(i, j, mid, 0) - get(i, j, mid, 1) <= k)
						pos[i][j] = mid,
						l = mid + 1;
					else
						r = mid - 1;
				}
			}
		for(int i = 1; i <= n; ++i)
			for(int j = 1; j <= m; ++j) {
				int now_min = inf;
				for(int d = i; d <= n; ++d) {
					now_min = min(now_min, pos[d][j]);
					ans = max(ans, (d - i + 1) * (now_min - j + 1));
				}
			}
		printf("Case #%d: %d\n", test_case, ans);
	}
	return 0;
}
