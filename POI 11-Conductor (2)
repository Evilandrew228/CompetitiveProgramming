/*
	We can trasform the inequality: p = max{Hj + sqrt(abs(i - j)) - Hi}
	Let f(x, i) = Hx + sqrt(abs(i - x))
	Observation: if for some i (k < j <= i) f(j, i) works better than f(k, i),
				 then it works better for all next i. In other words, the function is monotonous
	That means we can maintain monotonous deque for maximum.
	But we may have the next situation:
	(k < j <= i < i') f(k, i) is better than f(j, i), but f(k, i') is worse than f(j, i') (and for all next i' too).
	In other word, every index has own segment [L;R] of maximality, which may spoil our deque's work.
	But deque works here too, because all Rs of our deque are increaing, so we only need to compare current index with the last one of deque.
	You can look at code beneath to understand the idea more precisely.
*/

#include <bits/stdc++.h>
using namespace std;
 
struct point {
	int i, l, r;
};
 
const int N = 5e5 + 15;
int n, a[N], dp[N];
deque <point> q;
 
inline double get(int j, int i) {
	return a[i] + sqrt(abs(i - j));
}
 
void process() {
	q.clear();
	for(int i = 1; i <= n; ++i) {
		while(!q.empty() && q.front().r < i)
			q.pop_front();
		while(!q.empty() && get(max(i, q.back().l), q.back().i) <= get(max(i, q.back().l), i))
			q.pop_back();
		if(q.empty())
			q.push_back({i, i, n});
		else {
			int l = max(i, q.back().l), r = q.back().r, res = 0;
			while(l <= r) {
				int mid = l + r >> 1;
				if(get(mid, i) >= get(mid, q.back().i))
					res = mid, r = mid - 1;
				else
					l = mid + 1;
			}
			if(res) {
				if(res - 1 >= q.back().l)
					q.back().r = res - 1;
				else
					q.pop_back();
				q.push_back({i, res, n});
			}
		}
		dp[i] = max(dp[i], (int)ceil(get(i, q.front().i)) - a[i]);
	}
}
 
 
int main() {
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i)
		scanf("%d", &a[i]);
	process();
	reverse(a + 1, a + 1 + n);
	reverse(dp + 1, dp + 1 + n);
	process();
	for(int i = n; i; --i)
		printf("%d\n", dp[i]);
    return 0;
}
