/*
	We need to find path, going through the vertex 2, from vertex 1 to vertex 3.
	In other word, we should find two vertex-disjoint paths from vertex 2 to vertex 1 and vertex 3 respectively (obviously, disjount except vertex 2).
	If we make a vertex 2 as a source and a vertices 1 and 3 as sinks, by max-flow we can get maximum number of disjoint paths.
	Maximum flow cannot exceed 2, so, using Ford-Fulkerson with O(E * |f|), the solution works O(E).
*/
#include <bits/stdc++.h>
using namespace std;

#define max3(a, b, c) max(a, max(b, c))
#define min3(a, b, c) min(a, min(b, c))
#define mp make_pair
#define f first
#define se second
#define pb push_back
#define ppb pop_back
#define ll long long
#define ull unsigned long long
#define cntbit(x) __builtin_popcount(x)
#define uset unordered_set
#define umap unordered_map
#define pii pair<int, int>
#define ld long double
#define pll pair<long long, long long>

struct edge {
	int v, c, f;
};

const int S = 0;
const int T = 2e5 + 1;
const int inf = 2e9;
const int N = 2e5 + 15;
int t, n, m;
vector <int> g[N];
vector <edge> e;
bool used[N];

void add_edge(int i, int j, int c) {
	e.push_back({j, c, 0});
	g[i].push_back(e.size() - 1);

	e.push_back({i, 0, 0});
	g[j].push_back(e.size() - 1);
}

int dfs(int v, int cmin) {
	used[v] = true;
	if(v == T)
		return cmin;
	for(int ind : g[v]) {
		if(!used[e[ind].v] && e[ind].f < e[ind].c) {
			int flow_change = dfs(e[ind].v, min(cmin, e[ind].c - e[ind].f));
			if(flow_change) {
				e[ind].f += flow_change;
				e[ind ^ 1].f -= flow_change;
				return flow_change;
			}
		}
	}
	return 0;
}

int main() {
	scanf("%d", &t);
	while(t--) {
		for(int i = 0; i < N; ++i)
			g[i].clear();
		e.clear();
		scanf("%d%d", &n, &m);
		for(int i = 1; i <= m; ++i) {
			int u, v;
			scanf("%d%d", &u, &v);
			add_edge(u << 1 | 1, v << 1, 1);
			add_edge(v << 1 | 1, u << 1, 1);
		}
		for(int i = 1; i <= n; ++i)
	        add_edge(i << 1, i << 1 | 1, 1);
		add_edge(S, 2 << 1 | 1, inf);
		add_edge(1 << 1 | 1, T, 1);
		add_edge(3 << 1 | 1, T, 1);
		int flow = 0;
		while(1) {
			memset(used, 0, sizeof(used));
			int x = dfs(S, inf);
			if(!x)
				break;
			flow += x;
		}
		if(flow == 2)
			puts("YES");
		else
			puts("NO");
	}
    return 0;
}
